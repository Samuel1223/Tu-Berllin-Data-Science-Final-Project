# -*- coding: utf-8 -*-
"""Project_final(by Tin-Yu Chen and Yu-Kuang Yu).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1byN0qxG4k2ot07BMnLnD0vgZwvJwx146

# Project: Crime Data Analyst

<img src="img/minority-report.jpg" alt="Drawing" style="width: 500px;"/>

## Main objective

As a data science expert, you got a job from a police departement from another city. They want your help to analyze crime in the city with data science. Therefore they provide you with a data set from their city. They ask you to answer a few questions and plot interesting trends for the year 2017, which you will answer in a report based on the data set provided:


### Plan of attack:

1. **Load the crime data set in 'data/crime_data.csv' and investigate: (5%)**
    1. From what city is this data? (Lat and Long might help) (Use Google)
    2. From which year(s) is the data?
    3. How many crimes have been reported in total? (each row of the data refers to one reported crime.)


2. **Clean the the data: (25%):**
    1. remove the columns: "UCR PARTS" and "Location", which are not needed 
    2. the column "SHOOTING" only has the value `"Y"` (for yes) inside, if a shooting was reported for that crime. Otherwise, this value is NaN (not a number). Therefore clean this column by placing a `"N"` (for no) when no shooting was reported. 
    3. only use rows which where committed in the year __2017__, therefore remove other years.
    4. remove any row with incomplete data, e.g. remove any row which still has empty values.
    5. Save the cleaned data under 'data/clean_crime.csv' and use it for plotting.


3. **Create the following plots and answer the attached question: (60%)**
    1. Create a bar chart, which displays the frequency of each crime type (use the column OFFENSE_CODE_GROUP). What is the most frequent crime type?
    
    2. Show the total crime count per hour for all days of the week. Therefore, create a line chart with the hours of a day on the x-axis and the total count of crimes on the y-axis. How does crime proceed during the day?
    
    3. For each district, create a Pie Chart, which shows the count of crimes for each street. Some districts have quite a lot of streets, therefore only display the **7** top streets. What is the street with most crimes for each district?
    
    4. Create a Map, which displays the crime types:
        1. Robbery
        2. Auto Theft
        3. Simple Assault
        4. Larcency
        5. Drug Violation
        6. Crimes with SHOOTING
        
       Therefore, plot the Lat and Long values as X- and Y-values in a scatter plot, and give each crime type a different marker. Since we want to focus on the city center, remove outliers (42.2< Lat < 42.4 and -71.2< Long < -70.9)(Check again the order of Lat and Long on your axis). What is the hotspot (mean) of each crime type? 
    5. __(Extra Credit)__ You may create any additional interisting plots, which you can present to your coworkers! 
       
       
4. **Finally, we want to use our skills to detect/predict crime in this city. Therefore, we want to build a classifier, which predicts the type of crime when it occurs. (10%)**
    1. Load the training data for a machine learning classifier in _'data/crime_training_data.csv'_ and corresponding training labels in _'data/crime_training_labels.csv'_.
    2. Train a classifier of your choosing with the training data set. 
    3. Predict the crime type (labels) of reported crimes in _'data/crime_test_data.csv'_.
    4. Save the predictions in a _.csv_ file.
    
### Hand in:
Hand in the following files in a _.zip_ file:
   - your code in a jupyter notebook (_.ipynb_) or standard python source code (_.py_).
   - a _.pdf_ with your findings and plots (you can easily create a PDF in juypter notebook under ->File-> Download as-> PDF via Latex, might need to install some software)
   - your predictions as a _csv._ file.
   
The _.zip_ file should have your name(s) in them, ex: _project_jason_harris.zip_.

Send the _.zip_ file to harris.e.jason@gmail.com before **Friday 29th, January 2021**.  


### Note on implementation:
- for each task, create a cell and answer the question(s) with 1-2 sentences in a markdown cell.
- when plotting, try to create one plot, before creating multiple plots for different districts or crime types
- try to use techniques learned in the course! Many similar problems have been used in the lectures/exercises
- don't hesitate to ask for help!
- You are free to use any classification algorithm that you want. If you find better recommendation approaches on the web(there certainly are better, but also more involved ones), you are free to use those.
- Some proven algorithms, other than the ones learned in the lectures are: 
    - https://towardsdatascience.com/intro-to-recommender-system-collaborative-filtering-64a238194a26
    - https://towardsdatascience.com/prototyping-a-recommender-system-step-by-step-part-1-knn-item-based-collaborative-filtering-637969614ea
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""# 1-A"""

crime = pd.read_csv('./data/crime_data.csv')

"""### Answer:Boston

# 1-B

### Answer:2015-2018
"""

sns.countplot(crime["YEAR"])

"""# 1-C

### Answer:319073
"""

crime.shape

crime.head(10)

"""# 2-A"""

crime.drop("UCR_PART",axis=1,inplace=True)
crime.drop("Location",axis=1,inplace=True)
crime

"""# 2-B"""

crime["SHOOTING"] = crime["SHOOTING"].fillna(value = "N")
crime

"""# 2-C"""

crime = crime[crime['YEAR'] == 2017]
crime

"""# 2-D"""

crime= crime.dropna()
crime

"""# 2-E"""

crime.to_csv('data_clean_crime.csv' ,index=False)

import os
os.getcwd()

"""# 3-A

### Answer:Motor Vehicle Accident Response
"""

ax = plt.gca()
sns.countplot(crime["OFFENSE_CODE_GROUP"])
crime["OFFENSE_CODE_GROUP"].unique()
crime["OFFENSE_CODE_GROUP"].value_counts()
ax.tick_params(axis='x', labelrotation=90)

"""# 3-B"""

from matplotlib.ticker import MultipleLocator, FuncFormatter

per_hour_crime = []
for h in range(24):
    per_hour_crime.append(len(crime[crime.HOUR==h]))
print(per_hour_crime)

ax = plt.gca()
x = list(range(24))
y = per_hour_crime
plt.plot(x,y,marker="D",linestyle=":",mfc='b',mec='b',)
plt.title("Total crime count per hour for all days of the week")
plt.xlabel("Hour")
plt.ylabel("Crime count")
plt.figure(figsize=(8,6))
ax.xaxis.set_major_locator(MultipleLocator(1))
plt.show()

"""# 3-C"""

DISTRICT_list = crime["DISTRICT"].unique()
DISTRICT_list

crime_sort = crime["STREET"].value_counts()
crime_sort

top_7 = crime_sort[0:7]
top_7

for district in DISTRICT_list :
    dis_frame = crime[crime["DISTRICT"] == district]
    dis_sort = dis_frame["STREET"].value_counts()
    top_7 = dis_sort[0:7]
    top_7.index
    
    
    
    fig1, ax1 = plt.subplots()
    ax1.pie(top_7, autopct='%1.1f%%',shadow=True, startangle=90,labels = top_7.index)
    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    
    
    ax1.set(title = district)
    plt.legend(loc = 'lower right', bbox_to_anchor = (1.6,0) )
    plt.show()
    print(top_7)

"""# 3-D"""

crime["Lat"]

fig = plt.figure(figsize=(15,10))

cr_Robbery = crime[crime["OFFENSE_CODE_GROUP"] == "Robbery"]
plt.scatter(cr_Robbery["Lat"], cr_Robbery["Long"],s=20,c='b',marker='o',alpha=0.5,label='Robbery')

cr_Auto = crime[crime["OFFENSE_CODE_GROUP"] == "Auto Theft"]
plt.scatter(cr_Auto["Lat"], cr_Auto["Long"],s=20,c='g',marker='x',alpha=1,label='Auto Theft')

cr_Simple = crime[crime["OFFENSE_CODE_GROUP"] == "Simple Assault"]
plt.scatter(cr_Simple["Lat"], cr_Simple["Long"],s=20,c='r',marker='v',alpha=0.4,label='Simple Assault')

cr_Lar = crime[crime["OFFENSE_CODE_GROUP"] == "Larcency"]
plt.scatter(cr_Lar["Lat"], cr_Lar["Long"],s=20,c='c',marker='*',alpha=1,label='Larcency')

cr_Drug = crime[crime["OFFENSE_CODE_GROUP"] == "Drug Violation"]
plt.scatter(cr_Drug["Lat"], cr_Drug["Long"],s=20,c='gold',marker='>',alpha=0.3,label='Drug Violation')

cr_Cr = crime[crime["OFFENSE_CODE_GROUP"] == "Crimes with SHOOTING"]
plt.scatter(cr_Cr["Lat"], cr_Cr["Long"],s=20,c='k',marker='+',alpha=1,label='Crime with SHOOTING')

plt.legend()
            
plt.ylabel("y")
plt.xlabel("y")
plt.xlim(42.2, 42.4)
plt.ylim(-71.2,-70.9)

plt.show()

"""# 3-E"""

sns.countplot(crime["DAY_OF_WEEK"])

crime_group = crime.groupby( ["DISTRICT"] ).count().reset_index()
crime_group

crime.info()

crime.describe()

crime.columns

"""# 4-A"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier, export_graphviz

df_training_data = pd.read_csv("../project/data/crime_training_data.csv")
df_training_data

df_training_label = pd.read_csv("./data/crime_training_labels.csv")
df_training_label

"""# 4-B"""

df_training_set = pd.concat([df_training_data,df_training_label],axis=1) #conbine the two dataframe
df_training_set

X_train = df_training_set.drop('OFFENSE_CODE_GROUP',axis=1)
Y_train = df_training_set['OFFENSE_CODE_GROUP']

logistic_regressor=LogisticRegression(max_iter=2000)
logistic_regressor.fit(X_train, Y_train)

train_predictions = logistic_regressor.predict(X_train)
train_accuracy = metrics.accuracy_score(train_predictions,Y_train)

print("Train Accuracy : %s" % "{0:.3%}".format(train_accuracy))

"""# 4-C"""

df_test_data = pd.read_csv("./data/crime_test_data.csv")
df_test_data

df_test_label = pd.read_csv("./data/crime_test_labels.csv")
df_test_label

df_testset = pd.concat([df_test_data,df_test_label],axis=1) # conbine the two dataframe of testset
df_testset

X_test = df_testset.drop('OFFENSE_CODE_GROUP',axis=1)
Y_test = df_testset['OFFENSE_CODE_GROUP']

X_test.head()

Y_test.unique()

test_predictions = logistic_regressor.predict(X_test)
test_accuracy = metrics.accuracy_score(test_predictions,Y_test)
print("Test accuracy : %s" % "{0:.3%}".format(test_accuracy))

prediction_1 = pd.DataFrame(test_predictions)

prediction_1

"""### Use DicisionTree (just want to try)"""

#criterion = gini
dt_model = DecisionTreeClassifier()
dt_model.fit(X_train, Y_train)

# Training the model 
train_predictions = dt_model.predict(X_train)
train_accuracy = metrics.accuracy_score(train_predictions,Y_train)

print("Accuracy : %s" % "{0:.3%}".format(train_accuracy))

# Testing the model
test_predictions = dt_model.predict(X_test)
test_accuracy = metrics.accuracy_score(test_predictions,Y_test)
print("Test accuracy : %s" % "{0:.3%}".format(test_accuracy))

prediction_2 = pd.DataFrame(test_predictions)

prediction_2

"""# 4-D"""

prediction_1.to_csv('prediction_LogisticRegression.csv' ,index=False)

prediction_2.to_csv('prediction_DicisionTree.csv' ,index=False)